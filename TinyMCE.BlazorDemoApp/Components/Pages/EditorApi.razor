@page "/editor-api"
@rendermode InteractiveServer
@inject IConfiguration Configuration

<PageTitle>EditorApi</PageTitle>

<h1>Editor API</h1>

<p>Shows various API interations with the tinymce editor instance.</p>

<script>
// Expose the configuration through a page global
window.MyCustomNamespace = {
  config: {
    init_instance_callback: function (editor) {
      editor.on('focus blur', function (e) {
        DotNet.invokeMethodAsync('TinyMCE.BlazorDemoApp', 'LogEvent', e.type);
      });
    }
  }
};
</script>

<Editor
  @ref="editor"
  Inline=false
  CloudChannel="8"
  LicenseKey="gpl"
  Value="@content"
  JsConfSrc="MyCustomNamespace.config"
  Disable=false
  ApiKey="@Configuration["BlazorDemoApp:ApiKey"]"
  ClassName="tinymce-wrapper"
/>

<button class="btn btn-primary" @onclick="ChangeContent">ChangeContent</button>
<button class="btn btn-primary" @onclick="InsertContent">InsertContent</button>

@code {
    private string content = "inital content";
    private TinyMCE.Blazor.Editor? editor;

    private void ChangeContent()
    {
        // Console.WriteLine("ChangeContent");
        content = "new content: " + DateTime.Now.Ticks;
    }
    private void InsertContent()
    {
        // Console.WriteLine("InsertContent");
        editor?.InsertContent("<b>Hello</b>");
    }

    [JSInvokable]
    public static void LogEvent(string name)
    {
        Console.WriteLine("TinyMCE editor event: " + name);
    }
}

